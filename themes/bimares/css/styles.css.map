{"version":3,"sources":["_common.scss","_sprite.scss","layout/_header.scss","layout/_page.scss","layout/_node.scss","layout/_view.scss","_variables.scss","components/_language-block.scss","components/_menu.scss","components/_tasks.scss"],"names":[],"mappings":"AAAA;EACE,gBAAe;EACf,iBAAgB,EACjB;;AAED;EACE,iBAAgB;EAChB,gBAAe;EACf,kBAAiB,EAClB;;ACED;;;;GAIG;AAqEH;EACC,sBAAqB;EACrB,+CAAgD,EAChD;;ACvFD;EACE,qBAAa;EAAb,qBAAa;EAAb,cAAa;EACb,oBAAe;MAAf,gBAAe,EAyBhB;EAvBC;IACE,eAAc;IACd,+BAAsB;YAAtB,uBAAsB;IACtB,WAAU;IACV,oBAAmB,EAKpB;IATD;MAMI,YAAW;MACX,aAAY,EACb;EAGH;IACE,WAAU,EACX;EAED;IACE,qBAAa;IAAb,qBAAa;IAAb,cAAa;IACb,oBAAe;QAAf,gBAAe,EAChB;;ACtBH;EACE,kBAAiB;EACjB,eAAc,EACf;;ACHD;EACE,qBAAa;EAAb,qBAAa;EAAb,cAAa;EACb,oBAAe;MAAf,gBAAe,EA6BhB;EA3BC;IACE,+BAAsB;YAAtB,uBAAsB;IACtB,WAAU;IACV,oBAAmB,EAepB;IAlBD;MAMI,YAAW,EACZ;IAED;MACE,YAAW;MACX,iBAAgB,EACjB;IAZH;MAeI,YAAW;MACX,aAAY,EACb;EAGH;IACE,WAAU,EAKX;IAHC;MACE,YAAW,EACZ;;AC7BL;EACE,qBAAa;EAAb,qBAAa;EAAb,cAAa;EACb,oBAAe;MAAf,gBAAe;EACf,0BAA8B;MAA9B,uBAA8B;UAA9B,+BAA8B,EAY/B;EAfD;IAOM,gBAAe;IACf,aAAY,EACb;ECJH;IDLF;MAYM,WAAU,EAEb,EAAA;;AEdH;EAGM,sBAAqB;EACrB,iBAAgB,EAuBjB;EA3BL;IAOQ,aAAY;IACZ,aAAY;IACZ,YAAW;IACX,aAAY;IACZ,uBAAsB;IACtB,mBAAkB;IAClB,4CAAmC;YAAnC,oCAAmC;IACnC,yCAAgC;IAAhC,iCAAgC,EAYjC;IA1BP;MAgBU,4CAAmC;cAAnC,oCAAmC,EACpC;IAjBT;MAoBU,yBAAwB,EAC3B;IArBP;MAwBU,6BAA4B,EAC/B;;ACzBP;EAEI,qBAAa;EAAb,qBAAa;EAAb,cAAa;EACb,0BAA8B;MAA9B,uBAA8B;UAA9B,+BAA8B;EAC9B,WAAU,EAQX;EAZH;IAMM,sBAAqB,EAKtB;IAXL;MAQQ,eFYY;MEXZ,gBAAe,EAChB;;ACVP;EAGM,sBAAqB;EACrB,oBAAmB,EACpB","file":"styles.css","sourcesContent":["body {\n  font-size: 18px;\n  line-height: 1.4;\n}\n\n.page-title {\n  margin: 0 0 20px;\n  font-size: 40px;\n  text-align: right;\n}","$icons: (\n\t  sprite: (width: 650px, height: 980px, svgPath: '../css/img/sprite.svg'),\n \tgb: (width: 640px, height: 480px, backgroundX: 0px, backgroundY: 0px),\n \tpl: (width: 640px, height: 480px, backgroundX: 0px, backgroundY: -490px),\n);\n\n////\n/// @author Mike Street\n/// @group Sprite\n////\n\n/**\n * The following variable and function originate from the sass-mq library.\n * If you have already included it, you can eliminate the below\n * https://github.com/sass-mq/sass-mq/blob/master/_mq.scss\n */\n\n/// Base font size on the `<body>` element\n/// @type Number (unit)\n$mq-base-font-size: 16px !default;\n\n/// Convert pixels to ems\n///\n/// @param {Number} $px - value to convert\n/// @param {Number} $base-font-size ($mq-base-font-size) - `<body>` font size\n///\n/// @example scss\n///  $font-size-in-ems: mq-px2em(16px);\n///  p { font-size: mq-px2em(16px); }\n///\n/// @requires $mq-base-font-size\n/// @returns {Number}\n@function mq-px2em($px, $base-font-size: $mq-base-font-size) {\n    @if unitless($px) {\n        @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n        @return mq-px2em($px + 0px); // That may fail.\n    } @else if unit($px) == em {\n        @return $px;\n    }\n    @return ($px / $base-font-size) * 1em;\n}\n\n\n/// Set the `$sprite` map\n/// @group sprite\n$sprite: map-get($icons, sprite) !default;\n\n/// Retrive an attributes value for a specific icon in the sprite map\n/// @param {string} $icon - The name of the icon\n/// @param {string} $attr - The attribute you wish to retrieve (e.g. width)\n@function sprite-attr($icon, $attr) {\n\t$newIcon: map-get($icons, $icon);\n\t@if $newIcon == null {\n\t\t@warn \"Can't find an icon with the name #{$icon}\";\n\t}\n\t@return map-get($newIcon, $attr);\n}\n\n/// Create a map with the specified icon of attributes\n/// @param {string} $icon - The name of the icon\n@function icon-attr($icon) {\n\t$attr: (\n\t\twidth: sprite-attr($icon, width),\n\t\theight: sprite-attr($icon, height),\n\t\tx: sprite-attr($icon, backgroundX),\n\t\ty: sprite-attr($icon, backgroundY)\n\t);\n\n\t@return $attr;\n}\n\n/// Get the width of an icon in em\n/// @param {string} $icon - The name of the icon\n@function icon_width($icon) {\n\t@return mq-px2em(sprite-attr($icon, width));\n}\n\n/// Get the height of an icon in em\n/// @param {string} $icon - The name of the icon\n@function icon_height($icon) {\n\t@return mq-px2em(sprite-attr($icon, height));\n}\n\n/// Assign the correct SVG background image and dimensions to the element\n%sprite {\n\tdisplay: inline-block;\n\tbackground-image: url(map-get($sprite, svgPath));\n}\n\n\n/// Add an SVG sprite icon using em positioning\n/// @param {string} $icon - The name of the icon\n/// @param {string} $type [all] - The properties wanted (can be `all`, `size` or `bg`).\n/// - `all` ensures the icon has the background, position and size.\n/// - `size` is just for dimensions\n/// - `bg` just  applies the backgrounds to an element\n/// @example scss - Usage\n/// .class {\n/// \t@include sprite(arrow);\n/// \t&:hover {\n/// \t\t@include sprite(arrowDown, bg)\n/// \t}\n/// }\n///\n/// @example css - Output\n/// .class {\n/// \tdisplay: inline-block;\n/// \tbackground-image: url(\"../css/img/sprite.svg\");\n/// \tbackground-size: 34.25em 32.1875em;\n/// }\n///\n///\n/// .class {\n/// \twidth: 1.3125em;\n/// \theight: 1.3125em;\n/// \tbackground-position: -0.3125em -0.3125em;\n/// }\n/// .class:hover {\n/// \tbackground-position: -2.25em -2.25em;\n/// }\n@mixin sprite($icon, $type: all) {\n\t@if $type == all {\n\t\t// Shares the backgrounds\n\t\t@extend %sprite;\n\t}\n\n\t$iconMap: icon-attr($icon);\n\n}\n\n",".s-header {\n  display: flex;\n  flex-wrap: wrap;\n\n  &__logo {\n    display: block;\n    box-sizing: border-box;\n    width: 30%;\n    padding-right: 40px;\n    img {\n      width: 100%;\n      height: auto;\n    }\n  }\n\n  &__content {\n    width: 70%;\n  }\n\n  &__top {\n    display: flex;\n    flex-wrap: wrap;\n  }\n\n  &__site-name {\n\n  }\n}",".page {\n  max-width: 1200px;\n  margin: 0 auto;\n}",".s-node {\n  display: flex;\n  flex-wrap: wrap;\n\n  &__image {\n    box-sizing: border-box;\n    width: 40%;\n    padding-right: 40px;\n\n    &.s-node--teaser {\n      width: 100%;\n    }\n\n    .view & {\n      width: 100%;\n      padding-right: 0;\n    }\n\n    img {\n      width: 100%;\n      height: auto;\n    }\n  }\n\n  &__content {\n    width: 60%;\n\n    .view & {\n      width: 100%;\n    }\n  }\n}",".view {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  .s-node {\n\n    img {\n      max-width: 100%;\n      height: auto;\n    }\n\n    @include tablet {\n      width: 48%;\n    }\n  }\n}","$tablet-width: 640px;\n$desktop-width: 960px;\n$wide-desktop-width: 1200px;\n\n@mixin tablet {\n  @media (min-width: #{$tablet-width}) {\n    @content;\n  }\n}\n@mixin desktop {\n  @media (min-width: #{$desktop-width}) {\n    @content;\n  }\n}\n@mixin wide {\n  @media (min-width: #{$wide-desktop-width}) {\n    @content;\n  }\n}\n\n$color-main: #42b3a6;","#block-languageswitcher {\n  .links {\n    li {\n      display: inline-block;\n      list-style: none;\n\n      a {\n        font-size: 0;\n        margin: 20px;\n        width: 40px;\n        height: 30px;\n        background-size: cover;\n        border-radius: 3px;\n        box-shadow: 0px 0px 0px 1px #42b3a6;\n        transition: 0.2s all ease-in-out;\n        &:hover {\n          box-shadow: 0px 0px 5px 1px #42b3a6;\n        }\n        &[hreflang=\"en\"] {\n        @include sprite(gb);\n          background-position: 0 0;\n      }\n        &[hreflang=\"pl\"] {\n        @include sprite(pl);\n          background-position: 0 -30px;\n      }\n      }\n    }\n  }\n}\n\n\n/// .class {\n/// \t@include sprite(arrow);\n/// \t&:hover {\n/// \t\t@include sprite(arrowDown, bg)\n/// \t}\n/// }","#block-bimares-main-menu {\n  > ul {\n    display: flex;\n    justify-content: space-between;\n    padding: 0;\n    li {\n      display: inline-block;\n      a {\n        color: $color-main;\n        font-size: 24px;\n      }\n    }\n  }\n}","#block-bimares-local-tasks {\n  > ul {\n    li {\n      display: inline-block;\n      padding-right: 40px;\n    }\n  }\n}"]}