{"version":3,"sources":["_reset.scss","_common.scss","_variables.scss","_sprite.scss","layout/_header.scss","../../../node_modules/susy/sass/susy/_su-math.scss","layout/_page.scss","layout/_node.scss","layout/_view.scss","components/_language-block.scss","components/_tasks.scss","components/_main-menu.scss","layout/_footer.scss","layout/_node-product.scss"],"names":[],"mappings":"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","file":"styles.css","sourcesContent":["html, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n  box-sizing: border-box;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section {\n  display: block;\n}\nbody {\n  line-height: 1;\n}\nol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}","body {\n  font-family: $font-main;\n  font-weight: 400;\n  font-size: 18px;\n  line-height: 1.4;\n  background: $color-bg;\n  color: $color-text;\n}\n\n.s-node--page .page-title {\n  margin: 0 0 20px;\n  font-size: 28px;\n  font-weight: 400;\n  text-align: center;\n}\n","$tablet-width: 640px;\n$desktop-width: 960px;\n$wide-desktop-width: 1200px;\n\n@mixin tablet {\n  @media (min-width: #{$tablet-width}) {\n    @content;\n  }\n}\n@mixin desktop {\n  @media (min-width: #{$desktop-width}) {\n    @content;\n  }\n}\n@mixin wide {\n  @media (min-width: #{$wide-desktop-width}) {\n    @content;\n  }\n}\n\n$susy: (\n  'columns': susy-repeat(12),\n  'gutters': 0.2,\n  'spread': 'narrow',\n  'container-spread': 'narrow',\n);\n\n$color-main: #42b3a6;\n$color-second: rgba(109, 193, 179, 0.5);\n$color-bg: rgba(236,248,247,0.3);\n$color-text: #333;\n$font-main: 'Roboto Condensed', serif;\n\n@mixin site-width {\n  margin: 0 auto;\n  @include desktop {\n    max-width: 960px;\n  }\n}\n\n@mixin transition ($time: 0.2s) {\n  transition: all $time ease-in-out;\n}\n","$icons: (\n\t  sprite: (width: 650px, height: 980px, svgPath: '../css/img/sprite.svg'),\n \tgb: (width: 640px, height: 480px, backgroundX: 0px, backgroundY: 0px),\n \tpl: (width: 640px, height: 480px, backgroundX: 0px, backgroundY: -490px),\n);\n\n////\n/// @author Mike Street\n/// @group Sprite\n////\n\n/**\n * The following variable and function originate from the sass-mq library.\n * If you have already included it, you can eliminate the below\n * https://github.com/sass-mq/sass-mq/blob/master/_mq.scss\n */\n\n/// Base font size on the `<body>` element\n/// @type Number (unit)\n$mq-base-font-size: 16px !default;\n\n/// Convert pixels to ems\n///\n/// @param {Number} $px - value to convert\n/// @param {Number} $base-font-size ($mq-base-font-size) - `<body>` font size\n///\n/// @example scss\n///  $font-size-in-ems: mq-px2em(16px);\n///  p { font-size: mq-px2em(16px); }\n///\n/// @requires $mq-base-font-size\n/// @returns {Number}\n@function mq-px2em($px, $base-font-size: $mq-base-font-size) {\n    @if unitless($px) {\n        @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n        @return mq-px2em($px + 0px); // That may fail.\n    } @else if unit($px) == em {\n        @return $px;\n    }\n    @return ($px / $base-font-size) * 1em;\n}\n\n\n/// Set the `$sprite` map\n/// @group sprite\n$sprite: map-get($icons, sprite) !default;\n\n/// Retrive an attributes value for a specific icon in the sprite map\n/// @param {string} $icon - The name of the icon\n/// @param {string} $attr - The attribute you wish to retrieve (e.g. width)\n@function sprite-attr($icon, $attr) {\n\t$newIcon: map-get($icons, $icon);\n\t@if $newIcon == null {\n\t\t@warn \"Can't find an icon with the name #{$icon}\";\n\t}\n\t@return map-get($newIcon, $attr);\n}\n\n/// Create a map with the specified icon of attributes\n/// @param {string} $icon - The name of the icon\n@function icon-attr($icon) {\n\t$attr: (\n\t\twidth: sprite-attr($icon, width),\n\t\theight: sprite-attr($icon, height),\n\t\tx: sprite-attr($icon, backgroundX),\n\t\ty: sprite-attr($icon, backgroundY)\n\t);\n\n\t@return $attr;\n}\n\n/// Get the width of an icon in em\n/// @param {string} $icon - The name of the icon\n@function icon_width($icon) {\n\t@return mq-px2em(sprite-attr($icon, width));\n}\n\n/// Get the height of an icon in em\n/// @param {string} $icon - The name of the icon\n@function icon_height($icon) {\n\t@return mq-px2em(sprite-attr($icon, height));\n}\n\n/// Assign the correct SVG background image and dimensions to the element\n%sprite {\n\tdisplay: inline-block;\n\tbackground-image: url(map-get($sprite, svgPath));\n}\n\n\n/// Add an SVG sprite icon using em positioning\n/// @param {string} $icon - The name of the icon\n/// @param {string} $type [all] - The properties wanted (can be `all`, `size` or `bg`).\n/// - `all` ensures the icon has the background, position and size.\n/// - `size` is just for dimensions\n/// - `bg` just  applies the backgrounds to an element\n/// @example scss - Usage\n/// .class {\n/// \t@include sprite(arrow);\n/// \t&:hover {\n/// \t\t@include sprite(arrowDown, bg)\n/// \t}\n/// }\n///\n/// @example css - Output\n/// .class {\n/// \tdisplay: inline-block;\n/// \tbackground-image: url(\"../css/img/sprite.svg\");\n/// \tbackground-size: 34.25em 32.1875em;\n/// }\n///\n///\n/// .class {\n/// \twidth: 1.3125em;\n/// \theight: 1.3125em;\n/// \tbackground-position: -0.3125em -0.3125em;\n/// }\n/// .class:hover {\n/// \tbackground-position: -2.25em -2.25em;\n/// }\n@mixin sprite($icon, $type: all) {\n\t@if $type == all {\n\t\t// Shares the backgrounds\n\t\t@extend %sprite;\n\t}\n\n\t$iconMap: icon-attr($icon);\n\n}\n\n",".s-header {\n  display: flex;\n  flex-wrap: wrap;\n  margin-bottom: 20px;\n  position: fixed;\n  left: 0;\n  right: 0;\n  top: 0;\n  z-index: 50;\n  padding-left: 5px;\n  background: white;\n  box-shadow: 0 1px 5px 0 #aaa;\n\n  @include tablet {\n    position: relative;\n    padding-left: 0;\n    background: none;\n    box-shadow: none;\n  }\n\n  &__logo {\n    display: block;\n    width: span(2 narrow);\n    margin-right: gutter();\n\n    @include tablet {\n      width: span(3 narrow);\n    }\n    img {\n      width: 100%;\n      height: auto;\n    }\n  }\n\n  &__content {\n    width: span(8 wide);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    @include tablet {\n      width: span(9);\n      position: relative;\n      flex-wrap: wrap;\n      justify-content: space-between;\n      align-items: baseline;\n    }\n  }\n\n  &__top {\n    //display: flex;\n    flex-wrap: wrap;\n  }\n\n  &__site-name {\n    font-size: 1.5em;\n    margin: 0 auto;\n\n    @include tablet {\n      margin: 20px 0 0;\n      font-size: 2em;\n    }\n\n    @include desktop {\n      font-size: 3em;\n    }\n\n  }\n}","/// Grid Math Engine\n/// ================\n/// The `su` functions give you direct access to the math layer,\n/// without any syntax-sugar like shorthand parsing, and normalization.\n/// If you prefer named arguments, and stripped-down syntax,\n/// you can use these functions directly in your code –\n/// replacing `span`, `gutter`, and `slice`.\n///\n/// These functions are also useful\n/// for building mixins or other extensions to Susy.\n/// Apply the Susy syntax to new mixins and functions,\n/// using our \"Plugin Helpers\",\n/// or write your own syntax and pass the normalized results along\n/// to `su` for compilation.\n///\n/// @group su-math\n///\n/// @see su-span\n/// @see su-gutter\n/// @see su-slice\n/// @ignore _su-sum\n/// @ignore _su-calc-span\n/// @ignore _su-calc-sum\n/// @ignore _su-needs-calc-output\n\n\n\n// Su Span\n// -------\n/// Calculates and returns a CSS-ready span width,\n/// based on normalized span and context data –\n/// a low-level version of `susy-span`,\n/// with all of the logic and none of the syntax sugar.\n///\n/// - Grids defined with unitless numbers will return `%` values.\n/// - Grids defined with comparable units\n///   will return a value in the units provided.\n/// - Grids defined with a mix of units,\n///   or a combination of untiless numbers and unit-lengths,\n///   will return a `calc()` string.\n///\n/// @group su-math\n/// @see susy-span\n///\n/// @param {number | list} $span -\n///   Number or list of grid columns to span\n/// @param {list} $columns -\n///   List of columns available\n/// @param {number} $gutters -\n///   Width of a gutter in column-comparable units\n/// @param {0 | 1 | -1} $spread -\n///   Number of gutters spanned,\n///   relative to `span` count\n/// @param {0 | 1 | -1} $container-spread [$spread] -\n///   Number of gutters spanned,\n///   relative to `columns` count\n/// @param {integer} $location [1] -\n///   Optional position of sub-span among full set of columns\n///\n/// @return {length} -\n///   Relative or static length of a span on the grid\n@function su-span(\n  $span,\n  $columns,\n  $gutters,\n  $spread,\n  $container-spread: $spread,\n  $location: 1\n) {\n  $span: su-valid-span($span);\n  $columns: su-valid-columns($columns);\n  $gutters: su-valid-gutters($gutters);\n  $spread: su-valid-spread($spread);\n\n  @if (type-of($span) == 'number') {\n    @if (not unitless($span)) {\n      @return $span;\n    }\n\n    $location: su-valid-location($span, $location, $columns);\n    $span: su-slice($span, $columns, $location, $validate: false);\n  }\n\n  @if _su-needs-calc-output($span, $columns, $gutters, $spread, not 'validate') {\n    @return _su-calc-span($span, $columns, $gutters, $spread, $container-spread, not 'validate');\n  }\n\n  $span-width: _su-sum($span, $gutters, $spread, $validate: false);\n\n  @if unitless($span-width) {\n    $container-spread: su-valid-spread($container-spread);\n    $container: _su-sum($columns, $gutters, $container-spread, $validate: false);\n    @return percentage($span-width / $container);\n  }\n\n  @return $span-width;\n}\n\n\n\n// Su Gutter\n// ---------\n/// Calculates and returns a CSS-ready gutter width,\n/// based on normalized grid data –\n/// a low-level version of `susy-gutter`,\n/// with all of the logic and none of the syntax sugar.\n///\n/// - Grids defined with unitless numbers will return `%` values.\n/// - Grids defined with comparable units\n///   will return a value in the units provided.\n/// - Grids defined with a mix of units,\n///   or a combination of untiless numbers and unit-lengths,\n///   will return a `calc()` string.\n///\n/// @group su-math\n/// @see susy-gutter\n///\n/// @param {list} $columns -\n///   List of columns in the grid\n/// @param {number} $gutters -\n///   Width of a gutter in column-comparable units\n/// @param {0 | 1 | -1} $container-spread -\n///   Number of gutters spanned,\n///   relative to `columns` count\n///\n/// @return {length} -\n///   Relative or static length of one gutter in a grid\n@function su-gutter(\n  $columns,\n  $gutters,\n  $container-spread\n) {\n  @if (type-of($gutters) == 'number') {\n    @if ($gutters == 0) or (not unitless($gutters)) {\n      @return $gutters;\n    }\n  }\n\n  @if _su-needs-calc-output($gutters, $columns, $gutters, -1, not 'validate') {\n    @return _su-calc-span($gutters, $columns, $gutters, -1, $container-spread, not 'validate');\n  }\n\n  $container: _su-sum($columns, $gutters, $container-spread);\n  @return percentage($gutters / $container);\n}\n\n\n\n// Su Slice\n// --------\n/// Returns a list of columns\n/// based on a given span/location slice of the grid –\n/// a low-level version of `susy-slice`,\n/// with all of the logic and none of the syntax sugar.\n///\n/// @group su-math\n/// @see susy-slice\n///\n/// @param {number} $span -\n///   Number of grid columns to span\n/// @param {list} $columns -\n///   List of columns in the grid\n/// @param {number} $location [1] -\n///   Starting index of a span in the list of columns\n/// @param {bool} $validate [true] -\n///   Check that arguments are valid before proceeding\n///\n/// @return {list} -\n///   Subset list of grid columns, based on span and location\n@function su-slice(\n  $span,\n  $columns,\n  $location: 1,\n  $validate: true\n) {\n  @if $validate {\n    $columns: su-valid-columns($columns);\n    $location: su-valid-location($span, $location, $columns);\n  }\n\n  $floor: floor($span);\n  $sub-columns: ();\n\n  @for $i from $location to ($location + $floor) {\n    $sub-columns: append($sub-columns, nth($columns, $i));\n  }\n\n  @if $floor != $span {\n    $remainder: $span - $floor;\n    $column: $location + $floor;\n    $sub-columns: append($sub-columns, nth($columns, $column) * $remainder);\n  }\n\n  @return $sub-columns;\n}\n\n\n\n// Su Sum\n// ------\n/// Get the total sum of column-units in a layout.\n///\n/// @group su-math\n/// @access private\n///\n/// @param {list} $columns -\n///   List of columns in the grid\n/// @param {number} $gutters -\n///   Width of a gutter in column-comparable units\n/// @param {0 | 1 | -1} $spread -\n///   Number of gutters spanned,\n///   relative to `columns` count\n/// @param {bool} $validate [true] -\n///   Check that arguments are valid before proceeding\n///\n/// @return {number} -\n///   Total sum of column-units in a grid\n@function _su-sum(\n  $columns,\n  $gutters,\n  $spread,\n  $validate: true\n) {\n  @if $validate {\n    $columns: su-valid-span($columns);\n    $gutters: su-valid-gutters($gutters);\n    $spread: su-valid-spread($spread);\n  }\n\n  // Calculate column-sum\n  $column-sum: 0;\n  @each $column in $columns {\n    $column-sum: $column-sum + $column;\n  }\n\n  $gutter-sum: (ceil(length($columns)) + $spread) * $gutters;\n  $total: if(($gutter-sum > 0), $column-sum + $gutter-sum, $column-sum);\n\n  @return $total;\n}\n\n\n\n// Su Calc\n// -------\n/// Return a usable span width as a `calc()` function,\n/// in order to create mixed-unit grids.\n///\n/// @group su-math\n/// @access private\n///\n/// @param {number | list} $span -\n///   Pre-sliced list of grid columns to span\n/// @param {list} $columns -\n///   List of columns available\n/// @param {number} $gutters -\n///   Width of a gutter in column-comparable units\n/// @param {0 | 1 | -1} $spread -\n///   Number of gutters spanned,\n///   relative to `span` count\n/// @param {0 | 1 | -1} $container-spread [$spread] -\n///   Number of gutters spanned,\n///   relative to `columns` count\n/// @param {bool} $validate [true] -\n///   Check that arguments are valid before proceeding\n///\n/// @return {length} -\n///   Relative or static length of a span on the grid\n@function _su-calc-span(\n  $span,\n  $columns,\n  $gutters,\n  $spread,\n  $container-spread: $spread,\n  $validate: true\n) {\n  @if $validate {\n    $span: su-valid-span($span);\n    $columns: su-valid-columns($columns);\n    $gutters: su-valid-gutters($gutters);\n    $spread: su-valid-spread($spread);\n    $container-spread: su-valid-spread($container-spread);\n  }\n\n  // Span and context\n  $span: _su-calc-sum($span, $gutters, $spread, not 'validate');\n  $context: _su-calc-sum($columns, $gutters, $container-spread, not 'validate');\n\n  // Fixed and fluid\n  $fixed-span: map-get($span, 'fixed');\n  $fluid-span: map-get($span, 'fluid');\n  $fixed-context: map-get($context, 'fixed');\n  $fluid-context: map-get($context, 'fluid');\n\n  $calc: '#{$fixed-span}';\n  $fluid-calc: '(100% - #{$fixed-context})';\n\n  // Fluid-values\n  @if (not $fluid-span) {\n    $fluid-calc: null;\n  } @else if ($fluid-span != $fluid-context) {\n    $fluid-span: '* #{$fluid-span}';\n    $fluid-context: if($fluid-context, '/ #{$fluid-context}', '');\n    $fluid-calc: '(#{$fluid-calc $fluid-context $fluid-span})';\n  }\n\n  @if $fluid-calc {\n    $calc: if(($calc != ''), '#{$calc} + ', '');\n    $calc: '#{$calc + $fluid-calc}';\n  }\n\n  @return calc(#{unquote($calc)});\n}\n\n\n\n// Su Calc-Sum\n// -----------\n/// Get the total sum of fixed and fluid column-units\n/// for creating a mixed-unit layout with `calc()` values.\n///\n/// @group su-math\n/// @access private\n///\n/// @param {list} $columns -\n///   List of columns available\n/// @param {number} $gutters -\n///   Width of a gutter in column-comparable units\n/// @param {0 | 1 | -1} $spread -\n///   Number of gutters spanned,\n///   relative to `span` count\n/// @param {bool} $validate [true] -\n///   Check that arguments are valid before proceeding\n///\n/// @return {map} -\n///   Map with `fixed` and `fluid` keys\n///   containing the proper math as strings\n@function _su-calc-sum(\n  $columns,\n  $gutters,\n  $spread,\n  $validate: true\n) {\n  @if $validate {\n    $columns: su-valid-span($columns);\n    $gutters: su-valid-gutters($gutters);\n    $spread: su-valid-spread($spread);\n  }\n\n  $fluid: 0;\n  $fixed: ();\n  $calc: null;\n\n  // Gutters\n  $gutters:  $gutters * (length($columns) + $spread);\n\n  // Columns\n  @each $col in append($columns, $gutters) {\n    @if unitless($col) {\n      $fluid: $fluid + $col;\n    } @else {\n      $fixed: _su-map-add-units($fixed, $col);\n    }\n  }\n\n  // Compile Fixed Units\n  @each $unit, $total in $fixed {\n    @if ($total != (0 * $total)) {\n      $calc: if($calc, '#{$calc} + #{$total}', '#{$total}');\n    }\n  }\n\n  // Calc null or string\n  @if $calc {\n    $calc: if(str-index($calc, '+'), '(#{$calc})', '#{$calc}');\n  }\n\n  // Fluid 0 => null\n  $fluid: if(($fluid == 0), null, $fluid);\n\n\n  // Return map\n  $return: (\n    'fixed': $calc,\n    'fluid': $fluid,\n  );\n\n  @return $return;\n}\n\n\n\n// Needs Calc\n// ----------\n/// Check if `calc()` will be needed in defining a span,\n/// if the necessary units in a grid are not comparable.\n///\n/// @group su-math\n/// @access private\n///\n/// @param {list} $span -\n///   Slice of columns to span\n/// @param {list} $columns -\n///   List of available columns in the grid\n/// @param {number} $gutters -\n///   Width of a gutter\n/// @param {0 | 1 | -1} $spread -\n///   Number of gutters spanned,\n///   relative to `span` count\n/// @param {bool} $validate [true] -\n///   Check that arguments are valid before proceeding\n///\n/// @return {bool} -\n///   `True` when units do not match, and `calc()` will be required\n@function _su-needs-calc-output(\n  $span,\n  $columns,\n  $gutters,\n  $spread,\n  $validate: true\n) {\n  @if $validate {\n    $span: su-valid-span($span);\n    $columns: su-valid-columns($columns);\n    $gutters: su-valid-gutters($gutters);\n  }\n\n  $has-gutter: if((length($span) > 1) or ($spread >= 0), true, false);\n  $check: if($has-gutter, append($span, $gutters), $span);\n  $safe-span: _su-is-comparable($check...);\n\n  @if ($safe-span == 'static') {\n    @return false;\n  } @else if (not $safe-span) {\n    @return true;\n  }\n\n  $safe-fluid: _su-is-comparable($gutters, $columns...);\n\n  @return not $safe-fluid;\n}\n",".page {\n  //background: susy-svg-grid(2) no-repeat scroll;\n  width: span(2 of 2 wide);\n  max-width: 1200px;\n  margin: 60px auto 10px;\n\n  @include tablet {\n    //background: susy-svg-grid() no-repeat scroll;\n    width: span(12 of 12 wide);\n    margin: 10px auto;\n  }\n}",".s-node {\n  display: flex;\n  flex-wrap: wrap;\n\n  &__image {\n    //background: rgba(255,0,0, 0.5);\n    width: span(2 of 2);\n\n    @include tablet {\n      width: span(4 narrow);\n\n      .s-node--page & {\n        margin-right: gutter();\n      }\n    }\n\n\n\n    //padding: gutter();\n\n    &.s-node--teaser {\n      width: 100%;\n    }\n\n    .view & {\n      width: 100%;\n      padding-right: 0;\n    }\n\n    img {\n      width: 100%;\n      height: auto;\n    }\n  }\n\n  &__content {\n    margin-top: 20px;\n    width: span(2 of 2);\n\n    @include tablet {\n      width: span(8);\n    }\n\n    .view & {\n      width: 100%;\n    }\n\n    h1 {\n      margin: 0;\n    }\n  }\n}",".view {\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n  .s-node {\n\n    img {\n      max-width: 100%;\n      height: auto;\n    }\n\n    @include tablet {\n      width: span(6);\n    }\n  }\n}","#block-languageswitcher {\n\n  @include desktop {\n    margin-bottom: 50px;\n  }\n\n  .links {\n    text-align: center;\n\n    @include tablet {\n      text-align: right;\n    }\n    li {\n      display: inline-block;\n      list-style: none;\n\n      a {\n        font-size: 0;\n        margin: 10px 20px;\n        width: 40px;\n        height: 30px;\n        background-size: cover;\n        border-radius: 3px;\n        box-shadow: 0 0 0 1px #42b3a6;\n        transition: 0.2s all ease-in-out;\n        &:hover {\n          box-shadow: 0 0 5px 1px #42b3a6;\n        }\n        &[hreflang=\"en\"] {\n        @include sprite(gb);\n          background-position: 0 0;\n      }\n        &[hreflang=\"pl\"] {\n        @include sprite(pl);\n          background-position: 0 -30px;\n      }\n      }\n    }\n  }\n}\n\n\n/// .class {\n/// \t@include sprite(arrow);\n/// \t&:hover {\n/// \t\t@include sprite(arrowDown, bg)\n/// \t}\n/// }","#block-bimares-local-tasks {\n  > ul {\n    li {\n      display: inline-block;\n      padding-right: 40px;\n    }\n  }\n}",".s-menu {\n\n  &__toggle {\n\n    $height: 12px;\n    $width: 40px;\n\n    position: absolute;\n    top: 9px;\n    right: 10px;\n    z-index: 30;\n    width: $width;\n    padding: $height 0;\n    @include transition();\n\n    @include tablet {\n      display: none;\n    }\n\n    span, span:before, span:after {\n      height: 5px;\n      width: inherit;\n      background: $color-main;\n      display: block;\n      content: '';\n      @include transition();\n    }\n\n    span {\n      &:before {\n        position: absolute;\n        top: 0;\n      }\n      &:after {\n        position: absolute;\n        top: $height*2;\n      }\n    }\n\n    &.active {\n      span {\n        background: transparent;\n        &:before {\n          top: $height;\n          transform: rotate(45deg);\n        }\n        &:after {\n          top: $height;\n          transform: rotate(-45deg);\n        }\n      }\n    }\n  }\n\n  &__canvas {\n    position: fixed;\n    top: 0;\n    bottom: 0;\n    left: -100%;\n    right: 100%;\n    z-index: 200;\n    box-sizing: border-box;\n    padding: 20px;\n    overflow: hidden;\n    background: rgba(255, 255, 255, 0.9);\n    @include transition();\n\n    @include tablet {\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      width: 100%;\n      padding: 10px 0;\n      background: none;\n    }\n\n    @include desktop {\n      top: 22px;\n    }\n\n    &.active {\n      left: 0;\n      right: 65px;\n    }\n  }\n}\n\nnav {\n  > .menu {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between;\n    padding: 0;\n    margin: 0;\n\n    @include tablet {\n      flex-wrap: nowrap;\n    }\n\n    .menu-item {\n      display: inline-block;\n      width: 100%;\n      text-align: center;\n      margin: 10px 0;\n\n      @include tablet {\n        width: 32%;\n      }\n      a {\n        transition: all .1s linear;\n        color: $color-text;\n        text-decoration: none;\n        font-size: 22px;\n        display: block;\n        padding: 5px 0;\n        &.is-active {\n          background: $color-second;\n        }\n\n        &:hover {\n          background: $color-main;\n          color: #fff;\n        }\n      }\n    }\n  }\n}","#block-footer {\n  background: $color-second;\n  padding: 20px;\n  display: flex;\n  margin-top: 20px;\n  justify-content: flex-end;\n\n  .s-footer__content {\n    color: #333;\n\n    p {\n      margin: 0;\n      font-size: 0.7em;\n    }\n  }\n}\n",".s-node--product {\n\n  .s-node__image {\n    width: span(12);\n    img {\n      width: 100%;\n    }\n  }\n  .s-node__content {\n    width: span(12);\n  }\n\n  &:hover {\n    @include desktop {\n      .s-node__content {\n        max-height: 280px;\n      }\n    }\n\n  }\n\n  .s-node__title {\n    font-size: 30px;\n  }\n}\n\n.s-node--teaser.s-node--product {\n  overflow: hidden;\n  position: relative;\n  margin-bottom: 4%;\n  box-shadow: 0 0 5px 0 rgba(0, 0, 0, 0.1);\n  .s-node__image {\n    line-height: 0;\n    img {\n      width: 100%;\n    }\n  }\n  .s-node__content {\n    box-sizing: border-box;\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    max-height: 90px;\n    padding: 10px;\n    color: #fff;\n    background: linear-gradient(to bottom, rgba(20, 19, 19, 0.01) 0%, #42b3a6 100%);\n    text-shadow: 0 0 10px rgba(0, 0, 0, 1);\n    line-height: 1.4;\n    transition: 0.5s max-height ease;\n    pointer-events: none;\n  }\n\n  &:hover {\n    @include desktop {\n      .s-node__content {\n        max-height: 280px;\n      }\n    }\n\n  }\n\n  .s-node__title {\n    margin: 0;\n    padding: 0;\n    height: 80px;\n    line-height: 1.2;\n    display: flex;\n    align-items: center;\n    a {\n      text-decoration: none;\n      font-size: 20px;\n      color: #fff;\n    }\n  }\n}\n"]}